from PyQt5.QtWidgets import QApplication, QMainWindow, QTextEdit, QStackedWidget, QWidget, QLineEdit, QGridLayout, \
    QVBoxLayout, QHBoxLayout, QPushButton, QFrame, QLabel, QSizePolicy
from PyQt5.QtGui import QIcon, QPainter, QMovie, QColor, QTextCharFormat, QFont, QPixmap, QTextBlockFormat
from PyQt5.QtCore import Qt, QSize, QTimer, pyqtSignal, QEvent
from dotenv import dotenv_values
import sys
import os
import traceback

# Environment and path setup
env_vars = dotenv_values('.env')
Assistantname = env_vars.get("Assistantname", "FRIDAY")  # Default if not found
current_dir = os.path.dirname(os.path.abspath(__file__))
old_chat_message = ""
TempDirPath = os.path.join(current_dir, "Frontend", "Files")
GraphicsDirPath = os.path.join(current_dir, "Graphics")

# Create temp directory if it doesn't exist
os.makedirs(TempDirPath, exist_ok=True)


# Utility functions
def AnswerModifier(Answer):
    if not Answer:
        return ""
    lines = Answer.split('\n')
    non_empty_lines = [line for line in lines if line.strip()]
    modified_answer = '\n'.join(non_empty_lines)
    return modified_answer


def QueryModifier(Query):
    if not Query:
        return ""
    new_query = Query.lower().strip()
    query_words = new_query.split()
    if not query_words:
        return ""

    question_words = ["how", "what", "who", "where", "when", "why", "which", "whose", "whom", "can you", "what's",
                      "where's", "how's"]
    if any(word + " " in new_query for word in question_words):
        if query_words[-1][-1] in ['.', '?', '!']:
            new_query = new_query[:-1] + "?"
        else:
            new_query += "?"
    else:
        if query_words[-1][-1] in ['.', '?', '!']:
            new_query = new_query[:-1] + "."
        else:
            new_query += "."
    return new_query.capitalize()


# File operations with error handling
def SetMicrophoneStatus(Command):
    try:
        with open(os.path.join(TempDirPath, "Mic.data"), "w", encoding='utf-8') as file:
            file.write(Command)
    except Exception as e:
        print(f"Error setting microphone status: {e}")


def GetMicrophoneStatus():
    try:
        with open(os.path.join(TempDirPath, "Mic.data"), "r", encoding='utf-8') as file:
            Status = file.read()
        return Status
    except FileNotFoundError:
        SetMicrophoneStatus("False")  # Create the file if it doesn't exist
        return "False"
    except Exception as e:
        print(f"Error getting microphone status: {e}")
        return "False"


def GetAssistantStatus():
    try:
        with open(os.path.join(TempDirPath, "Status.data"), "r", encoding='utf-8') as file:
            Status = file.read()
        return Status
    except FileNotFoundError:
        return "Ready"
    except Exception as e:
        print(f"Error getting assistant status: {e}")
        return "Ready"

def SetAssistantStatus(Status):
    with open(rf'{TempDirPath}\Status.data', "w", encoding="utf-8") as file:
        file.write(Status)



def MicButtonInitialed():
    SetMicrophoneStatus("False")


def MicButtonClosed():
    SetMicrophoneStatus("True")


def GraphicsDirectoryPath(Filename):
    Path = os.path.join(GraphicsDirPath, Filename)
    return Path


def TempDirectoryPath(Filename):
    Path = os.path.join(TempDirPath, Filename)
    return Path


def ShowTextToScreen(Text):
    try:
        with open(os.path.join(TempDirPath, "Responses.data"), "w", encoding='utf-8') as file:
            file.write(Text)
    except Exception as e:
        print(f"Error writing to responses file: {e}")


class ChatSection(QWidget):
    def __init__(self):
        super(ChatSection, self).__init__()
        layout = QVBoxLayout(self)
        layout.setContentsMargins(-10, 40, 40, 100)
        layout.setSpacing(-100)
        self.chat_text_edit = QTextEdit()
        self.chat_text_edit.setReadOnly(True)
        self.chat_text_edit.setTextInteractionFlags(Qt.NoTextInteraction)  # No text interaction
        self.chat_text_edit.setFrameStyle(QFrame.NoFrame)
        self.chat_text_edit.setStyleSheet("background-color: black;")
        layout.addWidget(self.chat_text_edit)
        self.setStyleSheet("background-color: black;")
        layout.setSizeConstraint(QVBoxLayout.SetDefaultConstraint)
        layout.setStretch(1, 1)
        self.setSizePolicy(QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding))
        text_color = QColor(Qt.blue)
        text_color_text = QTextCharFormat()
        text_color_text.setForeground(text_color)
        self.chat_text_edit.setCurrentCharFormat(text_color_text)
        self.gif_label = QLabel()
        self.gif_label.setStyleSheet("border: none;")
        movie = QMovie(GraphicsDirectoryPath("Jarvis.gif"))
        max_gif_size_W = 480
        max_gif_size_H = 270
        movie.setScaledSize(QSize(max_gif_size_W, max_gif_size_H))
        self.gif_label.setAlignment(Qt.AlignRight | Qt.AlignBottom)
        self.gif_label.setMovie(movie)
        movie.start()
        layout.addWidget(self.gif_label)
        self.label = QLabel("")
        self.label.setStyleSheet("color: white; font-size:16px; margin-right: 195px; border: none; margin-top: -30px;")
        self.label.setAlignment(Qt.AlignRight)
        layout.addWidget(self.label)
        layout.setSpacing(-10)
        layout.addWidget(self.gif_label)
        font = QFont()
        font.setPointSize(13)
        self.chat_text_edit.setFont(font)
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.loadMessages)
        self.timer.timeout.connect(self.SpeechRecogText)
        self.timer.start(5)
        self.chat_text_edit.viewport().installEventFilter(self)
        self.setStyleSheet("""
QScrollBar:vertical {
    border: none;
    background: black;
    width: 10px;
    margin: 0px 0px 0px 0px;
}
QScrollBar::handle:vertical {
    background: white;
    min-height: 20px;
}
QScrollBar::add-line:vertical {
    background: black;
    subcontrol-position: bottom;
    subcontrol-origin: margin;
    height: 10px;
}
QScrollBar::sub-line:vertical {
    background: black;
    subcontrol-position: top;
    subcontrol-origin: margin;
    height: 10px;
}
QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {
    border: none;
    background: none;
    color: none;
}
QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
    background: none;
}
""")

    def loadMessages(self):
        global old_chat_message
        with open(TempDirectoryPath('Responses.data'), "r", encoding='utf-8') as file:
            messages = file.read()
        if None == messages:
            pass
        elif len(messages) <= 1:
            pass
        elif str(old_chat_message) == str(messages):
            pass
        else:
            self.addMessage(message=messages, color='White')
            old_chat_message = messages

    def SpeechRecogText(self):
        with open(TempDirectoryPath('Status.data'), "r", encoding='utf-8') as file:
            messages = file.read()
        self.label.setText(messages)

    def load_icon(self, path, width=60, height=60):
        pixmap = QPixmap(path)
        new_pixmap = pixmap.scaled(width, height)
        self.icon_label.setPixmap(new_pixmap)

    def toggle_icon(self, event=None):
        if self.toggled:
            self.load_icon(GraphicsDirectoryPath('voice.png'), 60, 60)
            MicButtonInitialed()
        else:
            self.load_icon(GraphicsDirectoryPath('mic.png'), 60, 60)
            MicButtonClosed()
        self.toggled = not self.toggled

    def addMessage(self, message, color):
        cursor = self.chat_text_edit.textCursor()
        format = QTextCharFormat()
        formatm = QTextBlockFormat()
        formatm.setTopMargin(10)
        formatm.setLeftMargin(10)
        format.setForeground(QColor(color))
        cursor.setCharFormat(format)
        cursor.setBlockFormat(formatm)
        cursor.insertText(message + "\n")
        self.chat_text_edit.setTextCursor(cursor)



class InitialScreen(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        desktop = QApplication.desktop()
        screen_width = desktop.screenGeometry().width()
        screen_height = desktop.screenGeometry().height()
        content_layout = QVBoxLayout()
        content_layout.setContentsMargins(0, 0, 0, 150)

        gif_label = QLabel()
        movie = QMovie(GraphicsDirectoryPath('Jarvis.gif'))
        gif_label.setMovie(movie)
        max_gif_size_H = int(screen_width / 16 * 9)
        movie.setScaledSize(QSize(screen_width, max_gif_size_H))
        gif_label.setAlignment(Qt.AlignCenter)
        movie.start()
        gif_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        self.icon_label = QLabel()
        pixmap = QPixmap(GraphicsDirectoryPath('Mic_on.png'))
        new_pixmap = pixmap.scaled(60, 60)
        self.icon_label.setPixmap(new_pixmap)
        self.icon_label.setFixedSize(150, 150)
        self.icon_label.setAlignment(Qt.AlignCenter)
        self.toggled = True
        self.toggle_icon()
        self.icon_label.mousePressEvent = self.toggle_icon

        self.label = QLabel("")
        self.label.setStyleSheet("color: white; font-size:16px ; margin-bottom:0;")
        self.label.setAlignment(Qt.AlignCenter)

        content_layout.addWidget(gif_label, alignment=Qt.AlignCenter)
        content_layout.addWidget(self.label, alignment=Qt.AlignCenter)
        content_layout.addWidget(self.icon_label, alignment=Qt.AlignCenter)
        content_layout.setContentsMargins(0, 0, 0, 150)

        self.setLayout(content_layout)
        self.setFixedHeight(screen_height)
        self.setFixedWidth(screen_width)
        self.setStyleSheet("background-color: black;")
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.SpeechRecogText)
        self.timer.start(5)

    def SpeechRecogText(self):
        with open(TempDirectoryPath('Status.data'), "r", encoding='utf-8') as file:
            messages = file.read()
        self.label.setText(messages)

    def load_icon(self, path, width=60, height=60):
        pixmap = QPixmap(path)
        new_pixmap = pixmap.scaled(width, height)
        self.icon_label.setPixmap(new_pixmap)

    def toggle_icon(self, event=None):
        if self.toggled:
            self.load_icon(GraphicsDirectoryPath('Mic_on.png'), 60, 60)
            MicButtonInitialed()
        else:
            self.load_icon(GraphicsDirectoryPath('Mic_off.png'), 60, 60)
            MicButtonClosed()
        self.toggled = not self.toggled


class MessageScreen(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()

    def setup_ui(self):
        # Get screen dimensions
        desktop = QApplication.desktop()
        screen_width = desktop.screenGeometry().width()
        screen_height = desktop.screenGeometry().height()

        # Main layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)

        # Add chat section
        self.chat_section = ChatSection()
        layout.addWidget(self.chat_section)

        # Set widget properties
        self.setStyleSheet("background-color: black;")


class CustomTopBar(QWidget):
    def __init__(self, parent, stacked_widget):
        super().__init__(parent)
        self.stacked_widget = stacked_widget
        self.initUI()
        self.current_screen = None
        self.draggable = True
        self.offset = None

    def initUI(self):
        # Set fixed height for top bar
        self.setFixedHeight(50)

        # Main layout
        layout = QHBoxLayout(self)
        layout.setContentsMargins(10, 0, 10, 0)
        layout.setSpacing(10)

        # Title
        title_label = QLabel(f"{str(Assistantname).capitalize()} AI")
        title_label.setStyleSheet("color: black; font-size: 18px; background-color: white;")

        # Home button
        home_button = QPushButton(" Home")
        home_icon = QIcon(GraphicsDirectoryPath("Home.png"))
        home_button.setIcon(home_icon)
        home_button.setStyleSheet("height: 40px; line-height: 40px; background-color: white; color: black;")
        home_button.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(0))

        # Chat button
        message_button = QPushButton(" Chat")
        # Use Chats.png if available, otherwise fallback to Home.png
        chat_icon_path = GraphicsDirectoryPath("Chats.png")
        if not os.path.exists(chat_icon_path):
            chat_icon_path = GraphicsDirectoryPath("Home.png")
        message_icon = QIcon(chat_icon_path)
        message_button.setIcon(message_icon)
        message_button.setStyleSheet("height: 40px; line-height: 40px; background-color: white; color: black;")
        message_button.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(1))

        # Window control buttons
        minimize_button = QPushButton()
        minimize_icon = QIcon(GraphicsDirectoryPath("Minimize2.png"))
        minimize_button.setIcon(minimize_icon)
        minimize_button.setStyleSheet("background-color: white;")
        minimize_button.clicked.connect(self.minimizeWindow)

        self.maximize_icon = QIcon(GraphicsDirectoryPath('Maximize.png'))
        self.restore_icon = QIcon(GraphicsDirectoryPath('Minimize.png'))

        self.maximize_button = QPushButton()
        self.maximize_button.setIcon(self.maximize_icon)
        self.maximize_button.setFlat(True)
        self.maximize_button.setStyleSheet("background-color: white;")
        self.maximize_button.clicked.connect(self.maximizeWindow)

        close_button = QPushButton()
        close_icon = QIcon(GraphicsDirectoryPath("Close.png"))
        close_button.setIcon(close_icon)
        close_button.setStyleSheet("background-color: white;")
        close_button.clicked.connect(self.closeWindow)

        # Add widgets to layout
        layout.addWidget(title_label)
        layout.addStretch(1)
        layout.addWidget(home_button)
        layout.addWidget(message_button)
        layout.addStretch(1)
        layout.addWidget(minimize_button)
        layout.addWidget(self.maximize_button)
        layout.addWidget(close_button)

        # Bottom line
        line_frame = QFrame()
        line_frame.setFixedHeight(1)
        line_frame.setFrameShape(QFrame.HLine)
        line_frame.setFrameShadow(QFrame.Sunken)
        line_frame.setStyleSheet("border-color: black;")

        # Vertical layout for top bar and line
        vbox = QVBoxLayout()
        vbox.setContentsMargins(0, 0, 0, 0)
        vbox.setSpacing(0)
        vbox.addLayout(layout)
        vbox.addWidget(line_frame)

        self.setLayout(vbox)

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.fillRect(self.rect(), Qt.white)
        super().paintEvent(event)

    def minimizeWindow(self):
        self.parent().showMinimized()

    def maximizeWindow(self):
        if self.parent().isMaximized():
            self.parent().showNormal()
            self.maximize_button.setIcon(self.maximize_icon)
        else:
            self.parent().showMaximized()
            self.maximize_button.setIcon(self.restore_icon)

    def closeWindow(self):
        self.parent().close()

    def mousePressEvent(self, event):
        if self.draggable and event.button() == Qt.LeftButton:
            self.offset = event.pos()

    def mouseMoveEvent(self, event):
        if self.draggable and self.offset and event.buttons() == Qt.LeftButton:
            if self.parent().isMaximized():
                # If window is maximized, restore it before moving
                self.parent().showNormal()
                self.maximize_button.setIcon(self.maximize_icon)
            new_pos = event.globalPos() - self.offset
            self.parent().move(new_pos)

    def mouseReleaseEvent(self, event):
        self.offset = None


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.initUI()

    def initUI(self):
        # Get screen dimensions
        desktop = QApplication.desktop()
        screen_width = desktop.screenGeometry().width()
        screen_height = desktop.screenGeometry().height()

        # Create stacked widget for different screens
        self.stacked_widget = QStackedWidget(self)

        # Create screens
        initial_screen = InitialScreen()
        message_screen = MessageScreen()

        # Add screens to stacked widget
        self.stacked_widget.addWidget(initial_screen)
        self.stacked_widget.addWidget(message_screen)

        # Create top bar
        self.top_bar = CustomTopBar(self, self.stacked_widget)

        # Set window properties
        self.setGeometry(0, 0, screen_width, screen_height)
        self.setStyleSheet("background-color: black;")

        # Set menu and central widgets
        self.setMenuWidget(self.top_bar)
        self.setCentralWidget(self.stacked_widget)

    def closeEvent(self, event):
        # Clean up resources
        if hasattr(self, 'stacked_widget'):
            # Stop all timers
            for i in range(self.stacked_widget.count()):
                widget = self.stacked_widget.widget(i)
                if hasattr(widget, 'timer'):
                    widget.timer.stop()
                if hasattr(widget, 'chat_section') and hasattr(widget.chat_section, 'timer'):
                    widget.chat_section.timer.stop()

        # Accept the close event
        event.accept()


def GraphicalUserInterface():
    try:
        # Create temp directory if it doesn't exist
        os.makedirs(TempDirPath, exist_ok=True)

        # Ensure status files exist
        if not os.path.exists(os.path.join(TempDirPath, "Mic.data")):
            with open(os.path.join(TempDirPath, "Mic.data"), "w", encoding='utf-8') as file:
                file.write("False")

        if not os.path.exists(os.path.join(TempDirPath, "Status.data")):
            with open(os.path.join(TempDirPath, "Status.data"), "w", encoding='utf-8') as file:
                file.write("Ready")

        if not os.path.exists(os.path.join(TempDirPath, "Responses.data")):
            with open(os.path.join(TempDirPath, "Responses.data"), "w", encoding='utf-8') as file:
                file.write("")

        # Create and run application
        app = QApplication(sys.argv)
        window = MainWindow()
        window.show()
        sys.exit(app.exec_())
    except Exception as e:
        print(f"Critical error in GUI: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    GraphicalUserInterface()
