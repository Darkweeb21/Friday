import sys
import os
from dotenv import dotenv_values
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QTextEdit, QStackedWidget,
    QLineEdit, QVBoxLayout, QHBoxLayout, QPushButton, QFrame,
    QLabel, QSizePolicy
)
from PyQt5.QtGui import (
    QIcon, QPainter, QMovie, QColor, QTextCharFormat,
    QFont, QPixmap, QTextBlockFormat
)
from PyQt5.QtCore import Qt, QSize, QTimer

from Backend.SpeechToText import temp_dir_path

# Load environment variables
env_vars = dotenv_values(".env")
ASSISTANT_NAME = env_vars.get("Assistantname", "FRIDAY")

# Set fixed graphics path
GRAPHICS_DIR_PATH = r"C:\Users\himan\OneDrive\Desktop\Projects\FRIDAY\Frontend\Graphics"
CURRENT_DIR = os.getcwd()
TEMP_DIR_PATH = os.path.join(CURRENT_DIR, "Frontend", "Files")

# Ensure directories exist
os.makedirs(TEMP_DIR_PATH, exist_ok=True)

def get_graphics_path(filename):
    """Get full path for graphics files"""
    return os.path.join(GRAPHICS_DIR_PATH, filename)

def get_temp_path(filename):
    """Get full path for temporary files"""
    return os.path.join(TEMP_DIR_PATH, filename)

def answerModifier(answer):
    lines = answer.split("\n")
    non_empty_lines = [line for line in lines if line.strip()]
    modified_answer='\n'.join(non_empty_lines)
    return modified_answer


def query_modifier(query):
    """Modify query to ensure proper formatting"""
    new_query = query.lower().strip()
    query_words = [
        "how", "what", "who", "where", "when", "why",
        "which", "whose", "whom", "can you", "what's", "how's"
    ]

    if any(word + " " in new_query for word in question_words):
        new_query = new_query.rstrip(".!?") + "?"
    else:
        new_query = new_query.rstrip(".!?") + "."

    return new_query.capitalize()

def set_microphone_status(status):
    """Write microphone status to file"""
    with open(get_temp_path("Mic.data"), "w", encoding="utf-8") as file:
        file.write(str(status))

def get_microphone_status():
    """Read microphone status from file"""
    try:
        with open(get_temp_path("Mic.data"), "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        return "False"

def set_assistant_status(status):
    """Set assistant status safely using correct path"""
    try:
        status_path = get_temp_path("Status.data")
        with open(status_path, "w", encoding="utf-8") as file:
            file.write(status)
    except Exception as e:
        print(f"Error setting assistant status: {e}")

def get_assistant_status():
    """Get assistant status safely using correct path"""
    try:
        status_path = get_temp_path("Status.data")
        with open(status_path, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        return "Status file not found"
    except Exception as e:
        return f"Error reading status: {str(e)}"

def show_text_to_screen(text, response_file_path):
    try:
        print(f"Writing to file: {response_file_path}")
        print(f"Text to write: {text}")
        with open(response_file_path, "w", encoding="utf-8") as file:
            file.write(text)
        print("Successfully wrote to file")
        return True
    except Exception as e:
        print(f"Error writing response: {str(e)}")
        return f"Error writing response: {str(e)}"

class ChatSection(QWidget):
    def __init__(self):
        super().__init__()
        self.toggled = False
        self.old_chat_message = ""
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 40, 40, 100)
        layout.setSpacing(0)

        # Chat text area setup
        self.chat_text_edit = QTextEdit()
        self.chat_text_edit.setReadOnly(True)
        self.chat_text_edit.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.chat_text_edit.setFrameStyle(QFrame.NoFrame)
        font = QFont()
        font.setPointSize(13)
        self.chat_text_edit.setFont(font)
        layout.addWidget(self.chat_text_edit)

        # GIF setup
        self.gif_label = QLabel()
        self.gif_label.setStyleSheet("border: none;")
        movie = QMovie(get_graphics_path("Jarvis.gif"))
        movie.setScaledSize(QSize(480, 270))
        self.gif_label.setAlignment(Qt.AlignRight | Qt.AlignVCenter)
        self.gif_label.setMovie(movie)
        movie.start()

        # Status label setup
        self.status_label = QLabel("")
        self.status_label.setStyleSheet(
            "color: white; font-size: 20px; margin-right: 195px; "
            "border: none; margin-top: -30px"
        )
        self.status_label.setAlignment(Qt.AlignRight)

        layout.addWidget(self.gif_label)
        layout.addWidget(self.status_label)

        # Timer setup
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.load_message)
        self.timer.timeout.connect(self.update_speech_recognition)
        self.timer.start(100)  # 100ms interval

        self.setup_scrollbar_style()

    def setup_scrollbar_style(self):
        self.setStyleSheet("""
            QScrollBar:vertical {
                border: none;
                background: black;
                width: 10px;
                margin: 0px;
            }
            QScrollBar::handle:vertical {
                background: white;
                min-height: 20px;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                background: black;
                height: 10px;
            }
            QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {
                border: none;
                background: none;
                color: none;
            }
            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
                background: none;
            }
        """)

    def load_message(self):
        try:
            with open(get_temp_path("Responses.data"), "r", encoding="utf-8") as file:
                message = file.read()
                if message and message != self.old_chat_message:
                    self.add_message(message, 'white')
                    self.old_chat_message = message
        except FileNotFoundError:
            pass

    def update_speech_recognition(self):
        try:
            with open(get_temp_path("Status.data"), "r", encoding="utf-8") as file:
                status = file.read()
                self.status_label.setText(status)
        except FileNotFoundError:
            pass

    def add_message(self, message, color):
        cursor = self.chat_text_edit.textCursor()
        char_format = QTextCharFormat()
        block_format = QTextBlockFormat()

        block_format.setTopMargin(10)
        block_format.setLeftMargin(10)
        char_format.setForeground(QColor(color))

        cursor.setCharFormat(char_format)
        cursor.setBlockFormat(block_format)
        cursor.insertText(message + "\n")
        self.chat_text_edit.setTextCursor(cursor)

class InitialScreen(QWidget):
    def __init__(self):
        super().__init__()
        self.toggled = True
        self.setup_ui()

    def setup_ui(self):
        desktop = QApplication.desktop()
        screen_width = desktop.screenGeometry().width()
        screen_height = desktop.screenGeometry().height()

        layout = QHBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)

        # GIF setup
        gif_label = QLabel()
        movie = QMovie(get_graphics_path("Jarvis.gif"))
        max_gif_height = int(screen_width / 16 * 9)
        movie.setScaledSize(QSize(screen_width, max_gif_height))
        gif_label.setMovie(movie)
        gif_label.setAlignment(Qt.AlignCenter)
        movie.start()

        # Microphone icon setup
        self.icon_label = QLabel()
        self.load_icon(get_graphics_path("Mic_on.png"))
        self.icon_label.setFixedSize(150, 150)
        self.icon_label.setAlignment(Qt.AlignCenter)
        self.icon_label.mousePressEvent = self.toggle_icon

        # Status label setup
        self.status_label = QLabel("")
        self.status_label.setStyleSheet(
            "color: white; font-size: 16px; margin-bottom: 0"
        )

        layout.addWidget(gif_label, alignment=Qt.AlignCenter)
        layout.addWidget(self.status_label, alignment=Qt.AlignCenter)
        layout.addWidget(self.icon_label, alignment=Qt.AlignCenter)
        layout.setContentsMargins(0, 0, 0, 150)

        self.setLayout(layout)
        self.setFixedSize(screen_width, screen_height)
        self.setStyleSheet("background-color: black")

        # Timer setup
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_speech_recognition)
        self.timer.start(100)

    def load_icon(self, path, width=60, height=60):
        pixmap = QPixmap(path)
        new_pixmap = pixmap.scaled(width, height)
        self.icon_label.setPixmap(new_pixmap)

    def toggle_icon(self, event=None):
        self.toggled = not self.toggled
        if self.toggled:
            self.load_icon(get_graphics_path("Mic_on.png"))
            set_microphone_status("False")
        else:
            self.load_icon(get_graphics_path("Mic_off.png"))
            set_microphone_status("True")

    def update_speech_recognition(self):
        try:
            with open(get_temp_path("Status.data"), "r", encoding="utf-8") as file:
                status = file.read()
                self.status_label.setText(status)
        except FileNotFoundError:
            pass

class CustomTopBar(QWidget):
    def __init__(self, parent, stacked_widget):
        super().__init__()
        self.parent_window = parent
        self.stacked_widget = stacked_widget
        self.setup_ui()
        self.draggable = True
        self.offset = None

    def setup_ui(self):
        self.setFixedHeight(50)
        layout = QHBoxLayout(self)
        layout.setContentsMargins(10, 0, 10, 0)
        layout.setSpacing(5)

        # Title
        title_label = QLabel(f"{ASSISTANT_NAME.capitalize()} AI")
        title_label.setStyleSheet(
            "color: white; font-size: 20px; background-color: transparent"
        )

        # Buttons
        home_button = self.create_button("home.png", "  Home", 0)
        chat_button = self.create_button("Chats.png", "  Chat", 1)
        minimize_button = self.create_button("Minimize2.png", "", None)
        minimize_button.clicked.connect(self.parent_window.showMinimized)

        self.maximize_button = self.create_button("Maximize.png", "", None)
        self.maximize_button.clicked.connect(self.toggle_maximize)

        close_button = self.create_button("Close.png", "", None)
        close_button.clicked.connect(self.parent_window.close)

        # Add widgets to layout
        layout.addWidget(title_label)
        layout.addStretch(1)
        layout.addWidget(home_button)
        layout.addWidget(chat_button)
        layout.addStretch(1)
        layout.addWidget(minimize_button)
        layout.addWidget(self.maximize_button)
        layout.addWidget(close_button)

        self.setStyleSheet("background-color: #1a1a1a;")

    def create_button(self, icon_name, text, screen_index=None):
        button = QPushButton()
        icon_path = get_graphics_path(icon_name)
        if os.path.exists(icon_path):
            button.setIcon(QIcon(icon_path))
        if text:
            button.setText(text)
        button.setStyleSheet(
            "QPushButton { height: 40px; line-height: 40px; "
            "background-color: transparent; color: white; border: none; }"
            "QPushButton:hover { background-color: #2d2d2d; }"
        )
        if screen_index is not None:
            button.clicked.connect(
                lambda: self.stacked_widget.setCurrentIndex(screen_index)
            )
        return button

    def toggle_maximize(self):
        if self.parent_window.isMaximized():
            self.parent_window.showNormal()
            self.maximize_button.setIcon(
                QIcon(get_graphics_path("Maximize.png"))
            )
        else:
            self.parent_window.showMaximized()
            self.maximize_button.setIcon(
                QIcon(get_graphics_path("Minimize.png"))
            )

    def mousePressEvent(self, event):
        if self.draggable:
            self.offset = event.pos()

    def mouseMoveEvent(self, event):
        if self.draggable and self.offset:
            new_pos = event.globalPos() - self.offset
            self.parent_window.move(new_pos)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setup_ui()

    def setup_ui(self):
        # Create main container widget
        main_container = QWidget()
        main_layout = QVBoxLayout(main_container)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # Create and setup stacked widget
        self.stacked_widget = QStackedWidget()
        self.stacked_widget.addWidget(InitialScreen())
        self.stacked_widget.addWidget(ChatSection())

        # Create and add top bar
        top_bar = CustomTopBar(self, self.stacked_widget)

        # Add widgets to main layout
        main_layout.addWidget(top_bar)
        main_layout.addWidget(self.stacked_widget)

        # Set central widget
        self.setCentralWidget(main_container)

        # Set window properties
        desktop = QApplication.desktop()
        self.setGeometry(0, 0,
                         desktop.screenGeometry().width(),
                         desktop.screenGeometry().height())
        self.setStyleSheet("background-color: black;")

def GraphicalUserInterface():
    # Create required directories if they don't exist
    os.makedirs(TEMP_DIR_PATH, exist_ok=True)

    # Initialize application
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    GraphicalUserInterface()
